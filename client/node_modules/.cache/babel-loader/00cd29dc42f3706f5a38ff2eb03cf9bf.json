{"ast":null,"code":"var _jsxFileName = \"/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js\";\nimport React, { Component } from \"react\";\nimport AChart from \"react-apexcharts\";\nimport { connect } from 'react-redux';\nimport { postDate } from '../../actions/postDate';\nimport { postLines } from '../../actions/postLines';\nimport { createData } from \"../../actions/postActions\";\nimport { postColumns } from \"../../actions/postColumns\";\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.chart = e => {\n      this.setState({\n        componentChart: e\n      });\n      console.log(e);\n    };\n\n    this.processing = this.processing.bind(this);\n    this.state = {\n      componentChart: null,\n      ok: 0\n    };\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/').then(res => res.text()).then(res => {\n      this.props.createData(JSON.parse(res));\n    });\n    const promise2 = fetch('http://localhost:9000/API/read/columns').then(res => res.text()).then(res => {\n      this.props.postColumns(JSON.parse(res));\n    });\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col;\n    const co = c.map(x => {\n      return x.column_name;\n    });\n    return co;\n  }\n\n  processing() {\n    this.setState({\n      ok: 1\n    });\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    const date = data.map(x => {\n      return x.Date.split(\"T\")[0];\n    });\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(z => {\n        return z[x];\n      });\n      return {\n        name: x,\n        data: prel\n      };\n    });\n    var a = [s[0], s[3]];\n    this.setState({\n      load: true\n    });\n    this.props.postDate(date);\n    this.props.postLines(s);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  render() {\n    if (this.state.ok = 1) {\n      console.log(this.state);\n      this.state.componentChart.r.chart.hideseries(this.props.series[0].name);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(AChart, {\n      options: this.props.options,\n      series: this.props.series,\n      ref: this.chart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postDate: options => {\n      dispatch(postDate(options));\n      return Promise.resolve();\n    },\n    postLines: series => {\n      dispatch(postLines(series));\n      return Promise.resolve();\n    },\n    createData: data => {\n      dispatch(createData(data));\n      return Promise.resolve();\n    },\n    postColumns: col => {\n      dispatch(postColumns(col));\n      return Promise.resolve();\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);","map":{"version":3,"sources":["/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js"],"names":["React","Component","AChart","connect","postDate","postLines","createData","postColumns","Chart","constructor","props","chart","e","setState","componentChart","console","log","processing","bind","state","ok","callApi","callback","boundCallback","promise1","fetch","then","res","text","JSON","parse","promise2","Promise","all","segment","col","c","co","map","x","column_name","column","data","date","Date","split","splice","indexOf","s","prel","z","name","a","load","componentDidMount","render","r","hideseries","series","options","mapStateToProps","mapDispatchToProps","dispatch","resolve"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport AChart from \"react-apexcharts\";\nimport { connect } from 'react-redux'\nimport { postDate } from '../../actions/postDate'\nimport { postLines } from '../../actions/postLines'\nimport { createData } from \"../../actions/postActions\"\nimport { postColumns } from \"../../actions/postColumns\"\n\nclass Chart extends Component {\n\n  constructor(props) {\n    super(props);\n    this.processing = this.processing.bind(this);\n    this.state = {\n      componentChart: null,\n      ok: 0\n    }\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/')\n      .then(res => res.text())\n      .then(res => {\n        this.props.createData(JSON.parse(res))\n      });\n    const promise2 = fetch('http://localhost:9000/API/read/columns')\n      .then(res => res.text())\n      .then(res => {\n        this.props.postColumns(JSON.parse(res))\n      })\n      ;\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col\n    const co = c.map(\n      (x) => {\n        return x.column_name;\n      }\n    )\n    return co\n  }\n\n  processing() {\n    this.setState({ok:1})\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    const date = data.map(x => {\n      return x.Date.split(\"T\")[0]\n    }\n\n    );\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(\n        (z) => {\n          return z[x]\n        }\n      )\n      return ({ name: x, data: prel })\n    })\n    var a = [s[0],s[3]]\n    this.setState({ load: true })\n    this.props.postDate(date);\n    this.props.postLines(s);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  chart = (e) => {\n    this.setState({componentChart: e})\n    console.log(e);\n  }\n\n  render() {\n    if (this.state.ok =1) {\n      console.log(this.state);\n      this.state.componentChart.r.chart.hideseries(this.props.series[0].name)\n    }\n    return (\n      <div className=\"container\">\n          <AChart\n          options={this.props.options}\n          series={this.props.series}\n          ref={this.chart}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    postDate: (options) => {\n      dispatch(postDate(options))\n      return Promise.resolve()\n    },\n    postLines: (series) => {\n      dispatch(postLines(series))\n      return Promise.resolve()\n    },\n    createData: (data) => {\n      dispatch(createData(data))\n      return Promise.resolve()\n    },\n    postColumns: (col) => {\n      dispatch(postColumns(col))\n      return Promise.resolve()\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n"]},"metadata":{},"sourceType":"module"}
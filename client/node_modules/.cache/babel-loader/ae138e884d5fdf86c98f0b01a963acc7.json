{"ast":null,"code":"var _jsxFileName = \"/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js\";\nimport React, { Component } from \"react\";\nimport Achart from \"react-apexcharts\";\nimport { connect } from 'react-redux';\nimport { postDate } from '../../actions/postDate';\nimport { postLines } from '../../actions/postLines';\nimport { createData } from \"../../actions/postActions\";\nimport { postColumns } from \"../../actions/postColumns\";\n\nclass Chart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: null,\n      posts2: null,\n      date: []\n    };\n  }\n\n  async callApi() {\n    await fetch('http://localhost:9000/API/read/').then(res => res.text()).then(res => {\n      this.props.createData(JSON.parse(res));\n    });\n  }\n\n  async columns() {\n    await fetch('http://localhost:9000/API/read/columns').then(res => res.text()).then(res => {\n      this.props.postColumns(JSON.parse(res));\n    });\n  }\n\n  segment(col) {\n    let c = col;\n    const co = c.map(x => {\n      return x.column_name;\n    });\n    return co;\n  }\n\n  async componentDidMount() {\n    this.callApi();\n    this.columns();\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    const date = data.map(x => {\n      return x.Date;\n    });\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(z => {\n        return z[x];\n      });\n      return {\n        name: x,\n        data: prel\n      };\n    });\n    let a = s[0];\n    this.props.postDate(date);\n    this.props.postLines(a);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.col.length !== 0 && this.props.data.length !== 0 && this.state.date.length == 0) {\n      console.log('yes');\n      var column = this.segment(this.props.col);\n      var data = this.props.data;\n      const date = data.map(x => {\n        return x.Date;\n      });\n      column.splice(column.indexOf('Date'), 1);\n      var s = column.map(x => {\n        var prel = data.map(z => {\n          return z[x];\n        });\n        return {\n          name: x,\n          data: prel\n        };\n      });\n      let a = s[0];\n      this.props.postDate(date);\n      this.props.postLines(a);\n    }\n    /*   if(prevState.date != date){\n          this.setState({...date})\n        }\n      }\n      this.props.postDate(date)\n      this.props.postLines(a)\n      \n        const categories = [\n        \"1/12/2017\",\n        \"2/12/2017\",\n        \"3/12/2017\",\n        \"4/12/2017\",\n        \"5/12/2017\",\n        \"6/12/2017\",\n        \"7/12/2017\",\n        \"8/12/2017\",\n        \"9/12/2017\",\n        \"10/12/2017\",\n        \"11/12/2017\",\n        \"12/12/2017\",\n        \"13/12/2017\",\n        \"14/12/2017\",\n        \"15/12/2017\",\n        \"16/12/2017\",\n        \"17/12/2017\",\n        \"18/12/2017\",\n        \"19/12/2017\",\n        \"20/12/2017\",\n        \"21/12/2017\",\n        \"22/12/2017\",\n        \"23/12/2017\",\n        \"24/12/2017\",\n        \"25/12/2017\",\n        \"26/12/2017\",\n        \"27/12/2017\",\n        \"28/12/2017\",\n        \"29/12/2017\",\n        \"30/12/2017\",\n        \"31/12/2017\",\n        \"1/1/2018\",\n        \"02/01/2018\",\n        \"03/01/2018\",\n        \"04/01/2018\",\n        \"05/01/2018\",\n        \"06/01/2018\",\n        \"07/01/2018\",\n        \"08/01/2018\",\n        \"09/01/2018\",\n        \"10/01/2018\",\n        \"11/01/2018\",\n        \"12/01/2018\",\n        \"13/01/2018\",\n        \"14/01/2018\",\n        \"15/01/2018\",\n        \"16/01/2018\",\n        \"17/01/2018\",\n        \"18/01/2018\",\n        \"19/01/2018\",\n        \"20/01/2018\",\n        \"21/1/2018\",\n        \"22/1/2018\",\n        \"23/1/2018\",\n        \"24/1/2018\",\n        \"25/1/2018\",\n        \"26/1/2018\",\n        \"27/1/2018\",\n        \"28/1/2018\",\n        \"29/1/2018\",\n        \"30/1/2018\",\n        \"31/1/2018\",\n        \"01/02/2018\",\n        \"02/02/2018\",\n        \"03/02/2018\",\n        \"04/02/2018\",\n        \"05/02/2018\",\n        \"06/02/2018\",\n        \"07/02/2018\",\n        \"08/02/2018\",\n        \"09/02/2018\",\n        \"10/02/2018\",\n        \"11/02/2018\",\n        \"12/02/2018\",\n        \"13/02/2018\",\n        \"14/2/2018\",\n        \"15/2/2018\",\n        \"16/2/2018\",\n        \"17/2/2018\",\n        \"18/2/2018\",\n        \"19/2/2018\",\n        \"20/2/2018\",\n        \"21/2/2018\",\n        \"22/2/2018\",\n        \"23/2/2018\",\n        \"24/2/2018\",\n        \"25/2/2018\",\n        \"26/02/2018\",\n        \"27/02/2018\",\n        \"28/02/2018\",\n        \"01/03/2018\",\n        \"02/03/2018\",\n        \"03/03/2018\",\n        \"04/03/2018\",\n        \"05/03/2018\",\n        \"06/03/2018\",\n        \"07/03/2018\",\n        \"08/03/2018\",\n        \"09/03/2018\",\n        \"10/03/2018\",\n        \"11/03/2018\",\n        \"12/03/2018\",\n        \"13/03/2018\",\n        \"14/03/2018\",\n        \"15/03/2018\",\n        \"16/03/2018\",\n        \"17/3/2018\",\n        \"18/3/2018\",\n        \"19/3/2018\",\n        \"20/3/2018\",\n        \"21/3/2018\",\n        \"22/3/2018\",\n        \"23/3/2018\",\n        \"24/3/2018\",\n        \"25/3/2018\",\n        \"26/3/2018\",\n        \"27/3/2018\",\n        \"28/3/2018\",\n        \"29/03/2018\",\n        \"30/03/2018\",\n        \"31/03/2018\",\n        \"01/04/2018\",\n        \"02/04/2018\",\n        \"03/04/2018\",\n        \"04/04/2018\",\n        \"05/04/2018\",\n        \"06/04/2018\",\n        \"07/04/2018\",\n        \"08/04/2018\",\n        \"09/04/2018\",\n        \"10/4/2018\",\n        \"11/4/2018\",\n        \"12/4/2018\",\n        \"13/4/2018\",\n        \"14/4/2018\",\n        \"15/4/2018\",\n        \"16/4/2018\",\n        \"17/4/2018\",\n        \"18/4/2018\",\n        \"19/4/2018\",\n        \"20/4/2018\",\n        \"21/4/2018\",\n        \"22/04/2018\",\n        \"23/04/2018\",\n        \"24/04/2018\",\n        \"25/04/2018\",\n        \"26/04/2018\",\n        \"27/04/2018\",\n        \"28/04/2018\"\n      ];\n      \n      const cod = [\n        267,\n        328,\n        359,\n        269,\n        265,\n        296,\n        263,\n        277,\n        280,\n        314,\n        300,\n        307,\n        298,\n        299,\n        304,\n        280,\n        311,\n        244,\n        262,\n        307,\n        284,\n        264,\n        289,\n        264,\n        335,\n        338,\n        287,\n        259,\n        264,\n        284,\n        291,\n        295,\n        301,\n        325,\n        291,\n        304,\n        340,\n        362,\n        294,\n        246,\n        294,\n        301,\n        247,\n        248,\n        338,\n        259,\n        288,\n        267,\n        201,\n        378,\n        279,\n        283,\n        236,\n        331,\n        265,\n        267,\n        273,\n        301,\n        289,\n        246,\n        247,\n        249,\n        234,\n        267,\n        330,\n        291,\n        246,\n        259,\n        232,\n        274,\n        262,\n        250,\n        276,\n        292,\n        269,\n        261,\n        302,\n        306,\n        274,\n        290,\n        389,\n        294,\n        325,\n        272,\n        330,\n        272,\n        297,\n        290,\n        269,\n        337,\n        285,\n        276,\n        291,\n        364,\n        302,\n        309,\n        281,\n        346,\n        382,\n        314,\n        302,\n        320,\n        278,\n        275,\n        301,\n        344,\n        220,\n        286,\n        301,\n        273,\n        301,\n        288,\n        279,\n        312,\n        281,\n        282,\n        295,\n        328,\n        281,\n        283,\n        294,\n        268,\n        295,\n        280,\n        308,\n        330,\n        355,\n        293,\n        356,\n        323,\n        298,\n        290,\n        276,\n        306,\n        320,\n        314,\n        315,\n        362,\n        338,\n        290,\n        253,\n        312,\n        308,\n        340,\n        346,\n        337,\n        313,\n        288,\n        338\n      ];\n       const n = [\n        83.91,\n        82.88,\n        83.59,\n        82.92,\n        83.4,\n        80.45,\n        78.72,\n        82.6,\n        75.93,\n        85.94,\n        81.86,\n        78.27,\n        76.49,\n        81.24,\n        80.82,\n        80.29,\n        78.48,\n        80.5,\n        79.07,\n        79.2,\n        79.37,\n        97.59,\n        76.9,\n        76.85,\n        77.02,\n        78.57,\n        79.11,\n        80.62,\n        80.18,\n        78.68,\n        81.29,\n        78.71,\n        75.24,\n        76.22,\n        78.69,\n        80.55,\n        78.82,\n        78.39,\n        77.73,\n        76.46,\n        80.27,\n        71.8,\n        69.38,\n        74.09,\n        71.65,\n        68.27,\n        69.9,\n        69.37,\n        69.81,\n        77.65,\n        74.83,\n        74.16,\n        70.18,\n        71.55,\n        70.57,\n        72.16,\n        68,\n        69.24,\n        70.34,\n        65.54,\n        64.09,\n        66.07,\n        62.89,\n        65.11,\n        66.26,\n        68.84,\n        63.42,\n        63.07,\n        60.15,\n        60.67,\n        66.34,\n        68,\n        67.3,\n        70.4,\n        67.67,\n        69.79,\n        66,\n        75.31,\n        73.45,\n        74.3,\n        72.46,\n        74.61,\n        76.45,\n        75,\n        76.52,\n        75.25,\n        67.6,\n        67.33,\n        75.3,\n        80.7,\n        77.72,\n        76.2,\n        75.81,\n        82.56,\n        77.03,\n        77.79,\n        75.1,\n        75.92,\n        77.27,\n        79.31,\n        73.4,\n        73.24,\n        74.57,\n        78.09,\n        79.76,\n        84.11,\n        83.22,\n        82.18,\n        79.33,\n        81.95,\n        78.19,\n        89.26,\n        81.07,\n        78,\n        78.09,\n        86.08,\n        81.98,\n        87.62,\n        83.13,\n        87.76,\n        88.56,\n        82.68,\n        76.97,\n        79.75,\n        75.35,\n        79.12,\n        79.68,\n        79.96,\n        78.88,\n        81.58,\n        78.96,\n        78.34,\n        73.25,\n        79.88,\n        92.13,\n        87.99,\n        82.42,\n        84.6,\n        81,\n        78.07,\n        75.7,\n        78.89,\n        82.46,\n        82.15,\n        86,\n        83.9,\n        82.8,\n        78.3,\n        78.8\n      ];*/\n\n  }\n\n  render() {\n    return React.createElement(Achart, {\n      options: this.props.options,\n      series: this.props.series,\n      type: \"area\",\n      height: \"450\",\n      width: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postDate: options => {\n      dispatch(postDate(options));\n    },\n    postLines: series => {\n      dispatch(postLines(series));\n    },\n    createData: data => {\n      dispatch(createData(data));\n    },\n    postColumns: col => {\n      dispatch(postColumns(col));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);","map":{"version":3,"sources":["/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js"],"names":["React","Component","Achart","connect","postDate","postLines","createData","postColumns","Chart","state","posts","posts2","date","callApi","fetch","then","res","text","props","JSON","parse","columns","segment","col","c","co","map","x","column_name","componentDidMount","column","data","Date","splice","indexOf","s","prel","z","name","a","componentDidUpdate","prevProps","prevState","length","console","log","render","options","series","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Achart from \"react-apexcharts\";\nimport { connect } from 'react-redux'\nimport { postDate } from '../../actions/postDate'\nimport { postLines } from '../../actions/postLines'\nimport { createData } from \"../../actions/postActions\"\nimport { postColumns } from \"../../actions/postColumns\"\n\nclass Chart extends Component {\n  \n  state = {\n    posts: null,\n    posts2: null,\n    date: []\n  }\n\n  async callApi(){\n    await fetch('http://localhost:9000/API/read/')\n    .then(res => res.text())\n    .then(res => {\n      this.props.createData(JSON.parse(res))\n    })\n  }\n  \n  async columns(){\n    await fetch('http://localhost:9000/API/read/columns')\n    .then(res => res.text())\n    .then(res => {this.props.postColumns(JSON.parse(res))\n    })\n  }\n  \n\n  segment(col){\n  let c = col\n  const co = c.map(\n    (x)=>{\n      return x.column_name;\n    }\n  )\n  return co\n  }\n\n\n  async componentDidMount() {\n    this.callApi()\n    this.columns()\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    const date = data.map(x => {\n      return x.Date\n    }\n    );\n    column.splice( column.indexOf('Date'), 1 );\n    var s = column.map( x =>{\n      var prel= data.map(\n        (z)=>{\n          return z[x]\n        }\n      )\n      return({name: x, data: prel})\n    })\n    let a = s[0];\n    this.props.postDate(date)\n    this.props.postLines(a)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.props.col.length !== 0 && this.props.data.length !== 0 && this.state.date.length == 0){\n      console.log('yes')\n      var column = this.segment(this.props.col);\n      var data = this.props.data;\n      const date = data.map(x => {\n        return x.Date\n      }\n      );\n      column.splice( column.indexOf('Date'), 1 );\n      var s = column.map( x =>{\n        var prel= data.map(\n          (z)=>{\n            return z[x]\n          }\n        )\n        return({name: x, data: prel})\n      })\n      let a = s[0];\n      this.props.postDate(date)\n      this.props.postLines(a)\n    }\n  /*   if(prevState.date != date){\n        this.setState({...date})\n      }\n    }\n    this.props.postDate(date)\n    this.props.postLines(a)\n    \n\n\n    const categories = [\n      \"1/12/2017\",\n      \"2/12/2017\",\n      \"3/12/2017\",\n      \"4/12/2017\",\n      \"5/12/2017\",\n      \"6/12/2017\",\n      \"7/12/2017\",\n      \"8/12/2017\",\n      \"9/12/2017\",\n      \"10/12/2017\",\n      \"11/12/2017\",\n      \"12/12/2017\",\n      \"13/12/2017\",\n      \"14/12/2017\",\n      \"15/12/2017\",\n      \"16/12/2017\",\n      \"17/12/2017\",\n      \"18/12/2017\",\n      \"19/12/2017\",\n      \"20/12/2017\",\n      \"21/12/2017\",\n      \"22/12/2017\",\n      \"23/12/2017\",\n      \"24/12/2017\",\n      \"25/12/2017\",\n      \"26/12/2017\",\n      \"27/12/2017\",\n      \"28/12/2017\",\n      \"29/12/2017\",\n      \"30/12/2017\",\n      \"31/12/2017\",\n      \"1/1/2018\",\n      \"02/01/2018\",\n      \"03/01/2018\",\n      \"04/01/2018\",\n      \"05/01/2018\",\n      \"06/01/2018\",\n      \"07/01/2018\",\n      \"08/01/2018\",\n      \"09/01/2018\",\n      \"10/01/2018\",\n      \"11/01/2018\",\n      \"12/01/2018\",\n      \"13/01/2018\",\n      \"14/01/2018\",\n      \"15/01/2018\",\n      \"16/01/2018\",\n      \"17/01/2018\",\n      \"18/01/2018\",\n      \"19/01/2018\",\n      \"20/01/2018\",\n      \"21/1/2018\",\n      \"22/1/2018\",\n      \"23/1/2018\",\n      \"24/1/2018\",\n      \"25/1/2018\",\n      \"26/1/2018\",\n      \"27/1/2018\",\n      \"28/1/2018\",\n      \"29/1/2018\",\n      \"30/1/2018\",\n      \"31/1/2018\",\n      \"01/02/2018\",\n      \"02/02/2018\",\n      \"03/02/2018\",\n      \"04/02/2018\",\n      \"05/02/2018\",\n      \"06/02/2018\",\n      \"07/02/2018\",\n      \"08/02/2018\",\n      \"09/02/2018\",\n      \"10/02/2018\",\n      \"11/02/2018\",\n      \"12/02/2018\",\n      \"13/02/2018\",\n      \"14/2/2018\",\n      \"15/2/2018\",\n      \"16/2/2018\",\n      \"17/2/2018\",\n      \"18/2/2018\",\n      \"19/2/2018\",\n      \"20/2/2018\",\n      \"21/2/2018\",\n      \"22/2/2018\",\n      \"23/2/2018\",\n      \"24/2/2018\",\n      \"25/2/2018\",\n      \"26/02/2018\",\n      \"27/02/2018\",\n      \"28/02/2018\",\n      \"01/03/2018\",\n      \"02/03/2018\",\n      \"03/03/2018\",\n      \"04/03/2018\",\n      \"05/03/2018\",\n      \"06/03/2018\",\n      \"07/03/2018\",\n      \"08/03/2018\",\n      \"09/03/2018\",\n      \"10/03/2018\",\n      \"11/03/2018\",\n      \"12/03/2018\",\n      \"13/03/2018\",\n      \"14/03/2018\",\n      \"15/03/2018\",\n      \"16/03/2018\",\n      \"17/3/2018\",\n      \"18/3/2018\",\n      \"19/3/2018\",\n      \"20/3/2018\",\n      \"21/3/2018\",\n      \"22/3/2018\",\n      \"23/3/2018\",\n      \"24/3/2018\",\n      \"25/3/2018\",\n      \"26/3/2018\",\n      \"27/3/2018\",\n      \"28/3/2018\",\n      \"29/03/2018\",\n      \"30/03/2018\",\n      \"31/03/2018\",\n      \"01/04/2018\",\n      \"02/04/2018\",\n      \"03/04/2018\",\n      \"04/04/2018\",\n      \"05/04/2018\",\n      \"06/04/2018\",\n      \"07/04/2018\",\n      \"08/04/2018\",\n      \"09/04/2018\",\n      \"10/4/2018\",\n      \"11/4/2018\",\n      \"12/4/2018\",\n      \"13/4/2018\",\n      \"14/4/2018\",\n      \"15/4/2018\",\n      \"16/4/2018\",\n      \"17/4/2018\",\n      \"18/4/2018\",\n      \"19/4/2018\",\n      \"20/4/2018\",\n      \"21/4/2018\",\n      \"22/04/2018\",\n      \"23/04/2018\",\n      \"24/04/2018\",\n      \"25/04/2018\",\n      \"26/04/2018\",\n      \"27/04/2018\",\n      \"28/04/2018\"\n    ];\n    \n    const cod = [\n      267,\n      328,\n      359,\n      269,\n      265,\n      296,\n      263,\n      277,\n      280,\n      314,\n      300,\n      307,\n      298,\n      299,\n      304,\n      280,\n      311,\n      244,\n      262,\n      307,\n      284,\n      264,\n      289,\n      264,\n      335,\n      338,\n      287,\n      259,\n      264,\n      284,\n      291,\n      295,\n      301,\n      325,\n      291,\n      304,\n      340,\n      362,\n      294,\n      246,\n      294,\n      301,\n      247,\n      248,\n      338,\n      259,\n      288,\n      267,\n      201,\n      378,\n      279,\n      283,\n      236,\n      331,\n      265,\n      267,\n      273,\n      301,\n      289,\n      246,\n      247,\n      249,\n      234,\n      267,\n      330,\n      291,\n      246,\n      259,\n      232,\n      274,\n      262,\n      250,\n      276,\n      292,\n      269,\n      261,\n      302,\n      306,\n      274,\n      290,\n      389,\n      294,\n      325,\n      272,\n      330,\n      272,\n      297,\n      290,\n      269,\n      337,\n      285,\n      276,\n      291,\n      364,\n      302,\n      309,\n      281,\n      346,\n      382,\n      314,\n      302,\n      320,\n      278,\n      275,\n      301,\n      344,\n      220,\n      286,\n      301,\n      273,\n      301,\n      288,\n      279,\n      312,\n      281,\n      282,\n      295,\n      328,\n      281,\n      283,\n      294,\n      268,\n      295,\n      280,\n      308,\n      330,\n      355,\n      293,\n      356,\n      323,\n      298,\n      290,\n      276,\n      306,\n      320,\n      314,\n      315,\n      362,\n      338,\n      290,\n      253,\n      312,\n      308,\n      340,\n      346,\n      337,\n      313,\n      288,\n      338\n    ];\n\n    const n = [\n      83.91,\n      82.88,\n      83.59,\n      82.92,\n      83.4,\n      80.45,\n      78.72,\n      82.6,\n      75.93,\n      85.94,\n      81.86,\n      78.27,\n      76.49,\n      81.24,\n      80.82,\n      80.29,\n      78.48,\n      80.5,\n      79.07,\n      79.2,\n      79.37,\n      97.59,\n      76.9,\n      76.85,\n      77.02,\n      78.57,\n      79.11,\n      80.62,\n      80.18,\n      78.68,\n      81.29,\n      78.71,\n      75.24,\n      76.22,\n      78.69,\n      80.55,\n      78.82,\n      78.39,\n      77.73,\n      76.46,\n      80.27,\n      71.8,\n      69.38,\n      74.09,\n      71.65,\n      68.27,\n      69.9,\n      69.37,\n      69.81,\n      77.65,\n      74.83,\n      74.16,\n      70.18,\n      71.55,\n      70.57,\n      72.16,\n      68,\n      69.24,\n      70.34,\n      65.54,\n      64.09,\n      66.07,\n      62.89,\n      65.11,\n      66.26,\n      68.84,\n      63.42,\n      63.07,\n      60.15,\n      60.67,\n      66.34,\n      68,\n      67.3,\n      70.4,\n      67.67,\n      69.79,\n      66,\n      75.31,\n      73.45,\n      74.3,\n      72.46,\n      74.61,\n      76.45,\n      75,\n      76.52,\n      75.25,\n      67.6,\n      67.33,\n      75.3,\n      80.7,\n      77.72,\n      76.2,\n      75.81,\n      82.56,\n      77.03,\n      77.79,\n      75.1,\n      75.92,\n      77.27,\n      79.31,\n      73.4,\n      73.24,\n      74.57,\n      78.09,\n      79.76,\n      84.11,\n      83.22,\n      82.18,\n      79.33,\n      81.95,\n      78.19,\n      89.26,\n      81.07,\n      78,\n      78.09,\n      86.08,\n      81.98,\n      87.62,\n      83.13,\n      87.76,\n      88.56,\n      82.68,\n      76.97,\n      79.75,\n      75.35,\n      79.12,\n      79.68,\n      79.96,\n      78.88,\n      81.58,\n      78.96,\n      78.34,\n      73.25,\n      79.88,\n      92.13,\n      87.99,\n      82.42,\n      84.6,\n      81,\n      78.07,\n      75.7,\n      78.89,\n      82.46,\n      82.15,\n      86,\n      83.9,\n      82.8,\n      78.3,\n      78.8\n    ];*/\n  }\n\n  render() {\n    return (\n      <Achart\n        options={this.props.options}\n        series={this.props.series}\n        type=\"area\"\n        height=\"450\"\n        width=\"100%\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps= (state) => {\n  return{\n      data: state.data,\n      col: state.col,\n      series: state.series,\n      options: state.options\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n      postDate: (options) => {dispatch(postDate(options))},\n      postLines: (series) => {dispatch(postLines(series))},\n      createData: (data) => {dispatch(createData(data))},\n      postColumns: (col) => {dispatch(postColumns(col))}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { postDate } from '../../actions/postDate';\nimport { postLines } from '../../actions/postLines';\nimport { createData } from \"../../actions/postActions\";\nimport { postColumns } from \"../../actions/postColumns\";\nimport { postDate_s } from '../../actions/postDate_s';\nimport { postLines_s } from '../../actions/postLines_s';\nimport Seeds from './seeds';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.chart = e => {\n      this.setState({\n        componentChart: e\n      });\n    };\n\n    this.processing = this.processing.bind(this);\n    this.state = {\n      componentChart: null,\n      ok: 0\n    };\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/').then(res => res.text()).then(res => {\n      this.props.createData(JSON.parse(res));\n    });\n    const promise2 = fetch('http://localhost:9000/API/read/columns').then(res => res.text()).then(res => {\n      this.props.postColumns(JSON.parse(res));\n    });\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col;\n    const co = c.map(x => {\n      return x.column_name;\n    });\n    return co;\n  }\n\n  processing() {\n    this.setState({\n      ok: 1\n    });\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    const date = data.map(x => {\n      return x.Date.split(\"T\")[0];\n    });\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(z => {\n        return z[x];\n      });\n      return {\n        name: x,\n        data: prel\n      };\n    });\n    var a = [s[0], s[3]];\n    this.setState({\n      load: true\n    });\n    this.props.postDate(date);\n    this.props.postDate_s(date);\n    this.props.postLines(s);\n    this.props.postLines_s(s);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  render() {\n    console.log('aquÃ­');\n    console.log(this.props.series_s);\n    console.log(this.props.series_s == []);\n\n    if (typeof this.props.series_s === \"undefined\" || typeof this.props.options_s === \"undefined\") {\n      var a = 0;\n      var b = 1;\n    } else {\n      console.log('nonull');\n      /*\n      console.log(this.props.series_s[0])\n      var a = this.props.series_s[0].length;\n      var b = this.props.options_s.length;\n      */\n    }\n\n    if (a == b || this.props.series_s == null && this.props.options_s == null) {\n      return React.createElement(Seeds, {\n        todos: this.props.series_s,\n        date: this.props.options_s,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options,\n    series_s: state.series_s,\n    options_s: state.options_s\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postDate: options => {\n      dispatch(postDate(options));\n      return Promise.resolve();\n    },\n    postLines: series => {\n      dispatch(postLines(series));\n      return Promise.resolve();\n    },\n    createData: data => {\n      dispatch(createData(data));\n      return Promise.resolve();\n    },\n    postColumns: col => {\n      dispatch(postColumns(col));\n      return Promise.resolve();\n    },\n    postDate_s: options_s => {\n      dispatch(postDate_s(options_s));\n      return Promise.resolve();\n    },\n    postLines_s: series_s => {\n      dispatch(postLines_s(series_s));\n      return Promise.resolve();\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);","map":{"version":3,"sources":["/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js"],"names":["React","Component","connect","postDate","postLines","createData","postColumns","postDate_s","postLines_s","Seeds","Chart","constructor","props","chart","e","setState","componentChart","processing","bind","state","ok","callApi","callback","boundCallback","promise1","fetch","then","res","text","JSON","parse","promise2","Promise","all","segment","col","c","co","map","x","column_name","column","data","date","Date","split","splice","indexOf","s","prel","z","name","a","load","componentDidMount","render","console","log","series_s","options_s","b","mapStateToProps","series","options","mapDispatchToProps","dispatch","resolve"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport { postDate } from '../../actions/postDate'\nimport { postLines } from '../../actions/postLines'\nimport { createData } from \"../../actions/postActions\"\nimport { postColumns } from \"../../actions/postColumns\"\nimport { postDate_s } from '../../actions/postDate_s'\nimport { postLines_s } from '../../actions/postLines_s'\n\nimport Seeds from './seeds'\n\nclass Chart extends Component {\n\n  constructor(props) {\n    super(props);\n    this.processing = this.processing.bind(this);\n    this.state = {\n      componentChart: null,\n      ok: 0\n    }\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/')\n      .then(res => res.text())\n      .then(res => {\n        this.props.createData(JSON.parse(res))\n      });\n    const promise2 = fetch('http://localhost:9000/API/read/columns')\n      .then(res => res.text())\n      .then(res => {\n        this.props.postColumns(JSON.parse(res))\n      })\n      ;\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col\n    const co = c.map(\n      (x) => {\n        return x.column_name;\n      }\n    )\n    return co\n  }\n\n  processing() {\n    this.setState({ok:1})\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    const date = data.map(x => {\n      return x.Date.split(\"T\")[0]\n    }\n\n    );\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(\n        (z) => {\n          return z[x]\n        }\n      )\n      return ({ name: x, data: prel })\n    })\n    var a = [s[0],s[3]]\n    this.setState({ load: true })\n    this.props.postDate(date);\n    this.props.postDate_s(date);\n    this.props.postLines(s);\n    this.props.postLines_s(s);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  chart = (e) => {\n    this.setState({componentChart: e})\n  }\n\n  render() {\n    console.log('aquÃ­')\n    console.log(this.props.series_s)\n    console.log(this.props.series_s==[])\n    if(typeof this.props.series_s === \"undefined\" || typeof this.props.options_s === \"undefined\"){\n      var a = 0;\n      var b = 1\n    }else{\n      console.log('nonull')\n      /*\n      console.log(this.props.series_s[0])\n      var a = this.props.series_s[0].length;\n      var b = this.props.options_s.length;\n    */\n    }\n    if (a==b || this.props.series_s == null && this.props.options_s == null) {\n      return (\n        <Seeds todos={this.props.series_s} date={this.props.options_s}/>\n      );\n    }else{\n      return(\n        null\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options,\n    series_s: state.series_s,\n\t\toptions_s: state.options_s\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    postDate: (options) => {\n      dispatch(postDate(options))\n      return Promise.resolve()\n    },\n    postLines: (series) => {\n      dispatch(postLines(series))\n      return Promise.resolve()\n    },\n    createData: (data) => {\n      dispatch(createData(data))\n      return Promise.resolve()\n    },\n    postColumns: (col) => {\n      dispatch(postColumns(col))\n      return Promise.resolve()\n    },\n    postDate_s: (options_s) => {\n      dispatch(postDate_s(options_s))\n      return Promise.resolve()\n      },\n    postLines_s: (series_s) => {\n      dispatch(postLines_s(series_s))\n      return Promise.resolve()\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n"]},"metadata":{},"sourceType":"module"}
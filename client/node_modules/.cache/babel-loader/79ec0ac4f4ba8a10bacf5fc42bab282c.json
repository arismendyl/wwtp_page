{"ast":null,"code":"import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { postDate } from '../../actions/postDate';\nimport { postLines } from '../../actions/postLines';\nimport { createData } from \"../../actions/postActions\";\nimport { postColumns } from \"../../actions/postColumns\";\nimport Seeds from './seeds';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.chart = e => {\n      this.setState({\n        componentChart: e\n      });\n    };\n\n    this.processing = this.processing.bind(this);\n    this.state = {\n      componentChart: null,\n      ok: 0\n    };\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/').then(res => res.text()).then(res => {\n      this.props.createData(JSON.parse(res));\n    });\n    const promise2 = fetch('http://localhost:9000/API/read/columns').then(res => res.text()).then(res => {\n      this.props.postColumns(JSON.parse(res));\n    });\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col;\n    const co = c.map(x => {\n      return x.column_name;\n    });\n    return co;\n  }\n\n  processing() {\n    this.setState({\n      ok: 1\n    });\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    console.log(this.props.data);\n    const date = data.map(x => {\n      return x.Date.split(\"T\")[0];\n    });\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(z => {\n        return z[x];\n      });\n      return {\n        name: x,\n        data: prel\n      };\n    });\n    var a = [s[0], s[3]];\n    this.setState({\n      load: true\n    });\n    this.props.postDate(date);\n    this.props.postLines(s);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  render() {\n    console.log(this.props.series);\n    return null //<Seeds todos={this.props.series} options={this.props.options}/>\n    ;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postDate: options => {\n      dispatch(postDate(options));\n      return Promise.resolve();\n    },\n    postLines: series => {\n      dispatch(postLines(series));\n      return Promise.resolve();\n    },\n    createData: data => {\n      dispatch(createData(data));\n      return Promise.resolve();\n    },\n    postColumns: col => {\n      dispatch(postColumns(col));\n      return Promise.resolve();\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);","map":{"version":3,"sources":["/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js"],"names":["React","Component","connect","postDate","postLines","createData","postColumns","Seeds","Chart","constructor","props","chart","e","setState","componentChart","processing","bind","state","ok","callApi","callback","boundCallback","promise1","fetch","then","res","text","JSON","parse","promise2","Promise","all","segment","col","c","co","map","x","column_name","column","data","console","log","date","Date","split","splice","indexOf","s","prel","z","name","a","load","componentDidMount","render","series","mapStateToProps","options","mapDispatchToProps","dispatch","resolve"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport { postDate } from '../../actions/postDate'\nimport { postLines } from '../../actions/postLines'\nimport { createData } from \"../../actions/postActions\"\nimport { postColumns } from \"../../actions/postColumns\"\nimport Seeds from './seeds'\n\nclass Chart extends Component {\n\n  constructor(props) {\n    super(props);\n    this.processing = this.processing.bind(this);\n    this.state = {\n      componentChart: null,\n      ok: 0\n    }\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/')\n      .then(res => res.text())\n      .then(res => {\n        this.props.createData(JSON.parse(res))\n      });\n    const promise2 = fetch('http://localhost:9000/API/read/columns')\n      .then(res => res.text())\n      .then(res => {\n        this.props.postColumns(JSON.parse(res))\n      })\n      ;\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col\n    const co = c.map(\n      (x) => {\n        return x.column_name;\n      }\n    )\n    return co\n  }\n\n  processing() {\n    this.setState({ok:1})\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    console.log(this.props.data)\n    const date = data.map(x => {\n      return x.Date.split(\"T\")[0]\n    }\n\n    );\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(\n        (z) => {\n          return z[x]\n        }\n      )\n      return ({ name: x, data: prel })\n    })\n    var a = [s[0],s[3]]\n    this.setState({ load: true })\n    this.props.postDate(date);\n    this.props.postLines(s);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  chart = (e) => {\n    this.setState({componentChart: e})\n  }\n\n  render() {\n    console.log(this.props.series)\n    return (\n      null//<Seeds todos={this.props.series} options={this.props.options}/>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    postDate: (options) => {\n      dispatch(postDate(options))\n      return Promise.resolve()\n    },\n    postLines: (series) => {\n      dispatch(postLines(series))\n      return Promise.resolve()\n    },\n    createData: (data) => {\n      dispatch(createData(data))\n      return Promise.resolve()\n    },\n    postColumns: (col) => {\n      dispatch(postColumns(col))\n      return Promise.resolve()\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js\";\nimport React, { Component } from \"react\";\nimport Achart from \"react-apexcharts\";\nimport { connect } from 'react-redux';\nimport { postDate } from '../../actions/postDate';\nimport { postLines } from '../../actions/postLines';\nimport { createData } from \"../../actions/postActions\";\nimport { postColumns } from \"../../actions/postColumns\";\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props); // Replace instance method with a new 'bound' version\n\n    this.processing = this.processing.bind(this);\n  }\n\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/').then(res => res.text()).then(res => {\n      this.props.createData(JSON.parse(res));\n    });\n    const promise2 = fetch('http://localhost:9000/API/read/columns').then(res => res.text()).then(res => {\n      this.props.postColumns(JSON.parse(res));\n    });\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col;\n    const co = c.map(x => {\n      return x.column_name;\n    });\n    return co;\n  }\n\n  processing() {\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    console.log(data);\n    const date = data.map(x => {\n      return x.Date;\n    });\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(z => {\n        return z[x];\n      });\n      return {\n        name: x,\n        data: prel\n      };\n    });\n    var a = [s[0], s[1]];\n    this.setState({\n      load: true\n    });\n    this.props.postDate(date);\n    console.log(a);\n    this.props.postLines(a);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  render() {\n    return React.createElement(Achart, {\n      options: this.props.options,\n      series: this.props.series,\n      type: \"area\",\n      height: \"450\",\n      width: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postDate: options => {\n      dispatch(postDate(options));\n      return Promise.resolve();\n    },\n    postLines: series => {\n      dispatch(postLines(series));\n      return Promise.resolve();\n    },\n    createData: data => {\n      dispatch(createData(data));\n      return Promise.resolve();\n    },\n    postColumns: col => {\n      dispatch(postColumns(col));\n      return Promise.resolve();\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);","map":{"version":3,"sources":["/home/arismendyl/Documents/WWTP page/wwtp/client/src/components/Charts/chart.js"],"names":["React","Component","Achart","connect","postDate","postLines","createData","postColumns","Chart","constructor","props","processing","bind","callApi","callback","boundCallback","promise1","fetch","then","res","text","JSON","parse","promise2","Promise","all","segment","col","c","co","map","x","column_name","column","data","console","log","date","Date","splice","indexOf","s","prel","z","name","a","setState","load","componentDidMount","render","options","series","mapStateToProps","state","mapDispatchToProps","dispatch","resolve"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Achart from \"react-apexcharts\";\nimport { connect } from 'react-redux'\nimport { postDate } from '../../actions/postDate'\nimport { postLines } from '../../actions/postLines'\nimport { createData } from \"../../actions/postActions\"\nimport { postColumns } from \"../../actions/postColumns\"\n\nclass Chart extends Component {\n\n  constructor(props) {\n    super(props);\n    // Replace instance method with a new 'bound' version\n    this.processing = this.processing.bind(this);\n  }\n  async callApi(callback) {\n    let boundCallback = callback.bind(this);\n    const promise1 = fetch('http://localhost:9000/API/read/')\n      .then(res => res.text())\n      .then(res => {\n        this.props.createData(JSON.parse(res))\n      });\n    const promise2 = fetch('http://localhost:9000/API/read/columns')\n      .then(res => res.text())\n      .then(res => {\n        this.props.postColumns(JSON.parse(res))\n      })\n      ;\n    Promise.all([promise1, promise2]).then(() => boundCallback());\n  }\n\n  segment(col) {\n    let c = col\n    const co = c.map(\n      (x) => {\n        return x.column_name;\n      }\n    )\n    return co\n  }\n\n  processing() {\n    var column = this.segment(this.props.col);\n    var data = this.props.data;\n    console.log(data)\n    const date = data.map(x => {\n      return x.Date\n    }\n\n    );\n    column.splice(column.indexOf('Date'), 1);\n    var s = column.map(x => {\n      var prel = data.map(\n        (z) => {\n          return z[x]\n        }\n      )\n      return ({ name: x, data: prel })\n    })\n    var a = [s[0],s[1]]\n    this.setState({ load: true })\n    this.props.postDate(date);\n    console.log(a)\n    this.props.postLines(a);\n  }\n\n  componentDidMount() {\n    this.callApi(this.processing);\n  }\n\n  render() {\n    return (\n        <Achart\n        options={this.props.options}\n        series={this.props.series}\n        type=\"area\"\n        height=\"450\"\n        width=\"100%\"\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    col: state.col,\n    series: state.series,\n    options: state.options\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    postDate: (options) => {\n      dispatch(postDate(options))\n      return Promise.resolve()\n    },\n    postLines: (series) => {\n      dispatch(postLines(series))\n      return Promise.resolve()\n    },\n    createData: (data) => {\n      dispatch(createData(data))\n      return Promise.resolve()\n    },\n    postColumns: (col) => {\n      dispatch(postColumns(col))\n      return Promise.resolve()\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n"]},"metadata":{},"sourceType":"module"}